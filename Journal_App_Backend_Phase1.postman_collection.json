{
  "info": {
    "_postman_id": "journal-app-backend-phase1",
    "name": "Journal App Backend - Phase 1",
    "description": "Complete API collection for Journal App Backend Phase 1 with user management and journal entry functionality",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "journal-app-api"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('username');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson).to.have.property('createdAt');",
                  "    ",
                  "    // Store user ID for later use",
                  "    pm.environment.set('userId', responseJson.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has session token\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('sessionToken');",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    ",
                  "    // Store session token for authenticated requests",
                  "    pm.environment.set('sessionToken', responseJson.sessionToken);",
                  "    pm.environment.set('userId', responseJson.user.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('username');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "me"]
            }
          },
          "response": []
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}_updated\",\n    \"email\": \"updated_{{email}}\",\n    \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Journal Entries",
      "item": [
        {
          "name": "Create Journal Entry",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has entry data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('title');",
                  "    pm.expect(responseJson).to.have.property('content');",
                  "    pm.expect(responseJson).to.have.property('authorId');",
                  "    ",
                  "    // Store entry ID for later use",
                  "    pm.environment.set('entryId', responseJson.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"My First Journal Entry\",\n    \"content\": \"Today was an amazing day! I learned so much about building APIs and working with MongoDB. The journal app is coming together nicely.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/entries",
              "host": ["{{baseUrl}}"],
              "path": ["api", "entries"]
            }
          },
          "response": []
        },
        {
          "name": "Get My Journal Entries",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/entries",
              "host": ["{{baseUrl}}"],
              "path": ["api", "entries"]
            }
          },
          "response": []
        },
        {
          "name": "Get Entry by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/entries/{{entryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "entries", "{{entryId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Journal Entry",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"My Updated Journal Entry\",\n    \"content\": \"Today was an amazing day! I learned so much about building APIs and working with MongoDB. The journal app is coming together nicely. UPDATE: I also learned about Postman collections!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/entries/{{entryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "entries", "{{entryId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Journal Entry",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/entries/{{entryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "entries", "{{entryId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Entries by User ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/entries",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "entries"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Public Endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/public/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["public", "api", "health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Scenarios",
      "item": [
        {
          "name": "Complete User Journey",
          "item": [
            {
              "name": "1. Register New User",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Generate unique test data",
                      "const timestamp = new Date().getTime();",
                      "pm.environment.set('testUsername', 'testuser_' + timestamp);",
                      "pm.environment.set('testEmail', 'test_' + timestamp + '@example.com');",
                      "pm.environment.set('testPassword', 'password123');"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"User registration successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('testUserId', responseJson.id);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "register"]
                }
              },
              "response": []
            },
            {
              "name": "2. Login with New User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Login successful\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    const responseJson = pm.response.json();",
                      "    pm.environment.set('testSessionToken', responseJson.sessionToken);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testPassword}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "login"]
                }
              },
              "response": []
            },
            {
              "name": "3. Create Multiple Entries",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Entry creation successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{testSessionToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"Day {{$randomInt}}: My Journey\",\n    \"content\": \"{{$randomLoremParagraph}} This is an automatically generated journal entry for testing purposes. {{$randomLoremSentence}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/entries",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "entries"]
                }
              },
              "response": []
            },
            {
              "name": "4. Get All User Entries",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Entries retrieved successfully\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{testSessionToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/entries",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "entries"]
                }
              },
              "response": []
            },
            {
              "name": "5. Logout",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{testSessionToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/auth/logout",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "logout"]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Register with Existing Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Should return 400 for duplicate username\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"email\": \"different@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login with Wrong Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Should return 401 for wrong password\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Access Protected Resource Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Should return 401 for missing token\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/entries",
              "host": ["{{baseUrl}}"],
              "path": ["api", "entries"]
            }
          },
          "response": []
        },
        {
          "name": "Create Entry with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Should return 400 for invalid data\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{sessionToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"\",\n    \"content\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/entries",
              "host": ["{{baseUrl}}"],
              "path": ["api", "entries"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "username",
      "value": "johndoe",
      "type": "string"
    },
    {
      "key": "email",
      "value": "john@example.com",
      "type": "string"
    },
    {
      "key": "password",
      "value": "password123",
      "type": "string"
    }
  ]
}
